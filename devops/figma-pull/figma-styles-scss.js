const handlize = (string) => {
  return string.toLowerCase().replace(/[^a-zA-Z0-9]/g, '-').replace(/---/g, '-').replace(/--/g, '-')
}

const hexValue = (rgba) => {
  const hex = [
    ((255 * rgba.r) | 1 << 8).toString(16).slice(1),
    ((255 * rgba.g) | 1 << 8).toString(16).slice(1),
    ((255 * rgba.b) | 1 << 8).toString(16).slice(1),
    ((255 * rgba.a) | 1 << 8).toString(16).slice(1)
  ].join('')

  return hex
}

export const figmaStylesSCSS = (styles) => {
  const colorStyles = styles.filter(style => style.type === 'RECTANGLE')
  const textStyles = styles.filter(style => style.type === 'TEXT')

  return `
/* ============================================================================
  Figma Generated Styles
  - Do not edit this file as it may be overwritten
============================================================================== */

/* Colors */

${
  colorStyles.map((colorStyle) => {
    const color = hexValue(colorStyle.fills[0].color)

    return `
$figma-color-${handlize(colorStyle.name)}: #${color};
    `.trim()
  }).join('\n')
}

${
  colorStyles.map((colorStyle) => {
    return `
.text--figma-color-${handlize(colorStyle.name)} {
  color: $figma-color-${handlize(colorStyle.name)};
}

.bg--figma-color-${handlize(colorStyle.name)} {
  background-color: $figma-color-${handlize(colorStyle.name)};
}
    `.trim()
  }).join('\n\n')
}

/* Typography */

${
  textStyles.map((textStyle) => {
    const style = textStyle.style
    const styleHandle = handlize(textStyle.name)
    return `
@mixin figma-${styleHandle}() {
  @include typography(${style.fontSize}, ${style.lineHeightPx}, ${style.fontWeight}, ${style.letterSpacing === 0 ? 0 : style.letterSpacing / style.fontSize * 100});
  font-family: ${style.fontFamily}, sans-serif;
  text-transform: ${(typeof style.textCase !== 'undefined' && style.textCase === 'UPPER') ? 'uppercase' : 'initial'};
}

.figma-${styleHandle} {
  ${`
${
  (styleHandle.includes('desktop') && '  @include media-query($min, $large) {') ||
  (styleHandle.includes('mobile') && '  @include media-query($max, $large) {') ||
  ''
}
${(styleHandle.includes('desktop') || styleHandle.includes('mobile')) ? '    ' : ''}@include figma-${styleHandle};
${
  ((styleHandle.includes('desktop') || styleHandle.includes('mobile')) && '  }') || ''
}
  `.trim()}
}
    `.trim()
  }).join('\n\n')
}
  `.trim()
}
